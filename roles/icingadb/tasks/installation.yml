---

- name: detect installed icingadb
  block:
    - name: detect if icingadb exists
      ansible.builtin.stat:
        path: /usr/sbin/icingadb
      register: icingadb_binary_file

    - name: define icingadb_installed
      ansible.builtin.set_fact:
        icingadb_installed: "{{ icingadb_binary_file.stat.exists }}"

- name: archlinux
  when:
    - ansible_os_family | lower == 'archlinux' or
      ansible_distribution | lower | replace(' ', '') == 'artixlinux'
  block:
    - name: install icingadb package via aur
      become: true
      become_user: aur_builder
      bodsch.core.aur:
        state: present
        name: icingadb
        repository: "{{ icingadb_repo_archlinux }}"

- name: openrc
  when:
    - ansible_service_mgr == 'openrc'
  block:
    - name: create conf.d/icingadb
      ansible.builtin.template:
        src: init/openrc/conf.d/icingadb.j2
        dest: /etc/conf.d/icingadb
        mode: 0644

    - name: create init.d/icingadb
      ansible.builtin.template:
        src: init/openrc/init.d/icingadb.j2
        dest: /etc/init.d/icingadb
        mode: 0755

- name: debian
  when:
    - not icingadb_installed
    - not ansible_os_family | lower == 'archlinux' or
      not ansible_distribution | lower | replace(' ', '') == 'artixlinux'
  block:
    - name: create policy-rc.d
      ansible.builtin.copy:
        dest: /usr/sbin/policy-rc.d
        content: |
          #!/bin/sh
          exit 101
        mode: 0755

    - name: install icingadb packages
      ansible.builtin.package:
        name: "{{ icingadb_packages }}"
        state: present
      register: icingadb_installer

    - name: do facts module to get latest information
      ansible.builtin.setup:

    - name: remove policy-rc.d
      ansible.builtin.file:
        path: /usr/sbin/policy-rc.d
        state: absent

- name: define icingadb version
  bodsch.icinga.icingadb_version:
  register: icingadb_version

- name: create custom fact file
  bodsch.core.facts:
    name: icingadb
    facts:
      version: "{{ icingadb_version.version }}"


- name: python support
  when:
    - icingadb_python_packages is defined
    - icingadb_python_packages | length > 0
  block:
    - name: create pip requirements file
      bodsch.core.pip_requirements:
        name: icingadb
        requirements: "{{ icingadb_python_packages }}"
      register: pip_requirements

    - name: fail if pip not installed
      ansible.builtin.fail:
        msg: python pip is not installed
      when:
        - not pip_requirements.pip.present

    - name: install docker python packages  # noqa no-handler
      ansible.builtin.pip:
        requirements: "{{ pip_requirements.requirements_file }}"
        state: present
        extra_args: "{{ icingadb_python_extra_args | default([]) | bodsch.core.python_extra_args(python_version=ansible_python.version) | default(omit) }}"
      register: pip_install
      when:
        - pip_requirements.requirements_file is defined
        - pip_requirements.changed

- name: re-read ansible facts
  ansible.builtin.setup:

...
